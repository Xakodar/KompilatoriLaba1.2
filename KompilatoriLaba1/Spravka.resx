<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Добро пожаловать в текстовый редактор, разработанный в рамках лабораторной работы по дисциплине «Теория формальных языков и компиляторов». Данное руководство поможет вам ознакомиться с основными функциями приложения.

1. Основные элементы интерфейса
Текстовый редактор состоит из следующих компонентов:

Главное меню – содержит основные команды для работы с текстом и программой.
Панель инструментов – предоставляет быстрый доступ к часто используемым функциям.
Область редактирования – используется для ввода и редактирования текста.
Область отображения результатов – предназначена для вывода сообщений языкового процессора (редактирование в этой области запрещено).
2. Главное меню
Главное меню предоставляет доступ к различным функциям программы. Оно включает следующие разделы:

Файл
Меню «Файл» содержит основные команды для работы с документами:

Создать – создаёт новый документ.
Открыть – открывает существующий текстовый файл.
Сохранить – сохраняет текущий документ.
Сохранить как – сохраняет документ с новым именем или в другой директории.
Выход – закрывает приложение. Если в документе есть несохранённые изменения, перед выходом появится запрос на их сохранение.
Правка
Меню «Правка» позволяет редактировать текст в области редактирования:

Отменить – отменяет последнее действие.
Повторить – выполняет повтор последнего действия.
Вырезать – удаляет выделенный фрагмент текста и помещает его в буфер обмена.
Копировать – копирует выделенный фрагмент в буфер обмена.
Вставить – вставляет текст из буфера обмена.
Удалить – удаляет выделенный фрагмент текста.
Выделить все – выделяет весь текст в области редактирования.
Справка
Меню «Справка» содержит информацию о программе и руководство пользователя:

Вызов справки – открывает это руководство.
О программе – отображает информацию о разработчике и версии программы.
3. Панель инструментов
Панель инструментов дублирует основные функции меню и содержит следующие кнопки:

Создать – создание нового документа.
Открыть – открытие существующего файла.
Сохранить – сохранение текущих изменений.
Отменить/Повторить – отмена или повтор последнего изменения.
Копировать/Вырезать/Вставить – стандартные операции работы с текстом.
Запуск синтаксического анализатора – (будет реализовано в следующих лабораторных работах).
Вызов справки – открывает руководство пользователя.
О программе – показывает информацию о редакторе.
4. Работа с файлами
Текстовый редактор поддерживает базовые операции с файлами:

При открытии файла содержимое заменяет текст в области редактирования.
При создании нового документа редактор предлагает сохранить текущий документ, если в нём есть несохранённые изменения.
Формат сохранения – выбирается пользователем (обычно .txt).
При выходе из программы редактор предупреждает о несохранённых изменениях.
5. Работа с текстом
Изменение размера окна – программа корректно реагирует на изменение размеров, включая области редактирования и вывода.
Полосы прокрутки – автоматически появляются, если текст выходит за границы окна.
Отмена и повтор – поддерживаются стандартные операции Ctrl+Z (отмена) и Ctrl+Y (повтор).
6. Дальнейшее развитие программы
На текущем этапе реализованы основные функции работы с текстом. В последующих версиях будут добавлены:

Синтаксический анализ текста.
Подсветка синтаксиса.
Работа с несколькими файлами (вкладки).
Выделение ошибок в тексте при анализе.
7. Заключение
Данный текстовый редактор является основой для дальнейшего развития в рамках курсовой работы. В случае возникновения вопросов обращайтесь к руководству пользователя через меню Справка → Вызов справки.

Если у вас есть предложения по улучшению программы, пожалуйста, свяжитесь с разработчиком через раздел О программе.</value>
  </data>
</root>